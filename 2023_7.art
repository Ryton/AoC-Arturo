#!/home/grimalkin/.arturo/bin/arturo -e
;==========================================
; Advent of Code solution 
;
; @file: tools/<year>_<day>.art (or default)
; @author: Mixomycetes
;==========================================

demoinput: {
32T3K 765
T55J5 684
KK677 28
KTJJT 220
QQQJA 483
}

; actual inject example here (into inptustr)
do "../helperfiles/GetAoCData.art"
year: 2023
day: 7
inputstr: chop read.lines ~"../data/input|year|_|day|.txt"; for B
;inputstr: split.lines demoinput

cardorder: split "23456789TJQKA"
cardorderB: split "J23456789TQKA"
cardvalues: @2..14 ; cardscore
cardscoreA: #.raw flatten couple cardorder cardvalues
cardscoreB: #.raw flatten couple cardorderB cardvalues
;print cardscoreA  ; #[2:5 3:6 4:7 5:8 6:9 7:10 8:11 9:12 T:13 J:14 Q:15 K:16 A:17]


scoreA: $[hand][
    handtally: tally hand
    ;print handtally
    maincost: map (values handtally) [serieslength]   [ 
        (14^(6))*(14^(serieslength+1))                       ] 
    tiebreaker: map.with: 'pos (hand) [c] [
        (14^(4+1-pos))*(cardscoreA\[c])] 
    ;print maincost
    ;print tiebreaker
    return ((sum maincost) + sum tiebreaker)  ; give points for card score
]

scoreB: $[hand][
    handtally: tally hand
    handtallyformain: new handtally
    ;print handtally


        if (key? handtallyformain "J") [

            if? (handtallyformain\["J"]= 5) [handtallyformain: new handtally]  ; captures JJJJJ
            else [
                ;print handtallyformain
                nJ: handtallyformain\["J"]
                remove.key 'handtallyformain "J"
                ;print handtallyformain
                handtallyformain: sort.values.descending handtallyformain 
                keylist: (keys handtallyformain)
                firstkey: keylist\0
                handtallyformain\[firstkey]: nJ + (handtallyformain\[firstkey])
                ]
            ]

    maincost: map (values handtallyformain) [serieslength]   [ 
        (14^(6))*(14^(serieslength+1))                       ] 
    tiebreaker: map.with: 'pos (hand) [c] [
        (14^(4+1-pos))*(cardscoreB\[c])
        ] 
    ;print maincost
    ;print tiebreaker
    return ((sum maincost) + sum tiebreaker)  ; give points for card score
        ;+ ((3^(neg 16))*(cardscore\[t]+1)^(handtally\[t]+1)) ] ] ;tiebreaker for AAK22 vs AAKK2.
]



solveA: $[inputstr][
    scored: #[]
    biddings: #[]  ; #["AAAAA": 253 , ...]
    loop inputstr 'line [
    splitline: split.by: " " line
    hand: splitline\0
    bids: splitline\1
    biddings\[hand]: bids  
    scored\[hand]: scoreA hand   ; assign unique value to hand.
    ]

    eachscore: []
    rankedhands:[]
    loop.with: 'rank (keys  sort.values scored) 'hand [    
        ;print biddings\[hand]
        currscore:((rank+1) * to :integer biddings\[hand])
        'rankedhands ++ hand ;
        ;print [hand  ":"  biddings\[hand]  "(bidding)" "*" (rank+1)  " (rank) = "  currscore  "(score)"]
        'eachscore ++ currscore

    ]
    return  sum eachscore ; 251572960   ;
]


solveB: $[inputstr][
    scored: #[]
    biddings: #[]  ; #["AAAAA": 253 , ...]
    loop inputstr 'line [
    splitline: split.by: " " line
    hand: splitline\0
    bids: splitline\1
    biddings\[hand]: bids  
        scored\[hand]: scoreB hand   ; assign unique value to hand.
    ]

    eachscore: []
    rankedhands:[]
    loop.with: 'rank (keys  sort.values scored) 'hand [    
        ;print biddings\[hand]
        currscore:((rank+1) * to :integer biddings\[hand])
        'rankedhands ++ hand ;
        ;print [hand  ":"  biddings\[hand]  "(bidding)" "*" (rank+1)  " (rank) = "  currscore  "(score)"]
        'eachscore ++ currscore

    ]
    return  sum eachscore ; 251572960   ;
]

t0: benchmark.get [

]
t1: benchmark.get [

 print [~"|year| |day| a: " solveA inputstr] 
 ] 
t2: benchmark.get  [
 print [~"|year| |day| b: " solveB inputstr] 
]

print(~"Time to parse:  \n |year|\\|day|parse) |t0| \n Time to solve: \n |year|\\|day|a) |t2| \n |year|\\|day|b) |t1|")




;; too high: 249427540  XX  250427776

; 249336796

 ;too low ;  248567264

 ;X  248572492 248572492 249336796   249445083 248369404 , 248984528 , 249066046 249061587
; [cards, bid]
; to test: 249061587
; // 249235016 //249282869 /249673603
; // 248642559 // 248716520 /249672948   // 248632348 //249665320 //248535770 ;248519552
; right answer: 248812215  :248519552 
;//248812215
  
;; B too low: 250019693 / 250057090