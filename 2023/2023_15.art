#!/home/grimalkin/.arturo/bin/arturo -

year: 2023
day: 15


demoex: split.by:"," {rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7}

parse: $[day,year][
;    do "../helperfiles/GetAoCData.art"
    inputstr: chop read ~"../data/input|year|_|day|.txt"; for B
    inputstr: replace inputstr {/\n/} ""
    inputstr:  split.by: "," inputstr
    ;inputstr: split.by:"," demoex
    return inputstr
]
;inspect inputstr



hash: $[inputstr][
    totalval: 0
    loop inputstr 'word [
        currval: 0
        ;print word
            loop (word) 'l [
            letterval: to :integer (to :char l)
            ;print letterval
            add 'currval letterval
            mul 'currval  17
            mod 'currval  256
            ]
            'currval: mod currval 256 
    add 'totalval  currval
    ]
    return  totalval
]

solveA: $[inputstr][
ensure.that: "dummy example failed" [ 52 = hash ["HASH"]]
ensure.that: "demo example failed" [(hash split.by:"," demoex ) = 1320]
return hash inputstr
]


calcscore: $[boxes][
    ;inspect boxes
    scores: []
    loop.with: 'boxnr boxes 'shelf [
        loop.with: 'slot values shelf 'focallength[
        ;print [boxnr slot focallength " " (boxnr+1)* (slot+1)*focallength]
        'scores ++ (boxnr+1) * (slot+1) * focallength
        ]
        
    ]  
return sum scores
]


solveB: $[inputstr][
   boxes: array.of: 256 #[]
    ; put them in boxes.
    loop inputstr 'line[
        if (in? "-" line )[
            splitline: split.by: "-" line
            val:0
            action: "rem"
            label:  (first splitline)
            boxlabel: (hash @[label])
            loop 0..255 'n [
                dctA:  boxes\[n]
                if  (key? dctA label) [ ; replace the old lens with the new lens:
                    boxes\[n]: remove.key dctA label
                ]
        ]

        ] ; end case -
        if (in? "=" line )[
            ; add smth
            action: "add"
            splitline: split.by: "=" line
            label:  (first splitline)
            val: last splitline
            val: to :integer last splitline
            boxlabel: (hash @[label])
            dctA:  boxes\[boxlabel]

            if?  (key? dctA label) [ ; replace the old lens with the new lens:
                 dctA\[label]: val
                 boxes\[boxlabel]: dctA
                 ]
            else[ ; add the lens to the box immediately behind any lenses already in the box. 
                 extend 'dctA  #.raw @[ label val] 
                 boxes\[boxlabel]: dctA
                 ]
          ] ; end case =
            ; per step
             ]  ;end loop

score: calcscore boxes
return score
]


t0: benchmark.get  [ 
    inputstr: parse day year
]


t1: benchmark.get  [ 
    print [~"|year| |day| a: "  ( solveA inputstr )] 
]


t2:  benchmark.get  [ 
    print "Start B solve:"
    answB: solveB inputstr
    print [~"|year| |day| b: " answB  ] 
    ]


roundQTT_ms: $[t][to :quantity @[round.to:1 scalar (in `ms t), `ms]]
print(~"Time to parse: \n |year|\\|day|parse) |roundQTT_ms t0| \n  Time to solve: \n |year|\\|day|a) |roundQTT_ms t1| \n |year|\\|day|b) |roundQTT_ms t2|")




