#!/home/grimalkin/.arturo/bin/arturo -e
;==========================================
; Advent of Code solution 
;
; @file: tools/<year>_<day>.art (or default)
; @author: Mixomycetes
;==========================================


demoinput: [
"467..114.."
"...*......"
"..35..633."
"......#..."
"617*......"
".....+.58."
"..592....."
"......755."
"...$.*...."
".664.598.."
]
 


; actual inject example here (into inptustr)
;do "../helperfiles/GetAoCData.art"
year: 2023
day: 3
 inputstr: chop read.lines ~"../data/input|year|_|day|.txt"; for B
 
 ; toy example
; inputstr: demoinput


 inputstr: @[repeat "." size first inputstr] ++ inputstr ++ @[repeat "." size first inputstr]


print inputstr

solve3B: $[inputstr]
[
gearprod: []
gearnrslist: []

 loop 2..((size inputstr)-2) 'linenr 
 [ ;...
    ;print(linenr)
    top: inputstr\[linenr-1]
    mid: inputstr\[linenr]
    bot: inputstr\[linenr+1]
    matches: match.bounds mid {/\*/}
    gearpos: map matches 'm [m]\0
    topnummatch: (match.full top {/\d+/})
    midnummatch: (match.full mid {/\d+/})
    botnummatch: (match.full bot {/\d+/})

     loop gearpos 'apos [
        gearnrs: []
        count: 0
             loop topnummatch\matches 'nrmatch [
                s: apos\0
                
                nrrange: @(nrmatch\1)
                val: to :integer (nrmatch\0)
    
     
                 if any? @[(in? s nrrange) (in? s+1 nrrange) (in? s-1 nrrange) ] [
                    
                            append 'gearnrs  val
                            print ["MATCH UP: " val "at line " linenr "pos " s]
                            'count: count+1 ]

             ]
             loop midnummatch\matches 'nrmatch [
                s: apos\0
                nrrange: @(nrmatch\1)
                val: to :integer (nrmatch\0)
             if  any? @[(in? s nrrange) (in? s+1 nrrange) (in? s-1 nrrange) ] [
                append 'gearnrs val 
                print ["MATCH MID: " val "at line " linenr "pos " s]
                'count: count+1 ]
             ]
             loop botnummatch\matches 'nrmatch [
                s: apos\0
                nrrange: @(nrmatch\1)
                val: to :integer (nrmatch\0)
             if any? @[(in? s nrrange) (in? s+1 nrrange) (in? s-1 nrrange) ][
                 append 'gearnrs val 
                 print ["MATCH BOT: " val "at line " linenr "pos " s]
                 'count: count+1 ]
                 
             ]


        if (count=2) [print ["gearnrs: " gearnrs ]
                                append 'gearprod  product gearnrs
                                append 'gearnrslist @[gearnrs] ]

     ]


    ;  curr answer => wrong . 19417165 
    ; next answer 82301120


 ]

print["gearprod: " gearprod]
print["gearnrslist: " gearnrslist]
print["3b (sum gearprod): " sum gearprod]

return (sum gearprod)
]


;print inputstr

parsemask: $[inputstr][mask: [] loop.with: 'x (inputstr) 'line [ loop.with: 'y (split line) 'char [ if? (in? char  ".0123456789")  [ ] else [ loop @[(x-1) (x+0) (x+1)] 'xx [ loop @[(y-1) (y+0) (y+1)] 'yy [ 'mask ++ @[@[xx yy]]] ]]]]    return unique mask];

t0: benchmark.get [
    
mask: parsemask inputstr ;inputstr
;starmask: parsestarmask  inputstr
;print starmask
print ["mask built"]
]
t1: benchmark.get [

; print [~"|year| |day| a: " solveA mask inputstr] ; 474678, 505766 too low   X  88390 505766  552395 507255  x -> too low? 474678 505766   => way too low . 153721 516573 x  156050 514347
 
 ] 
t2: benchmark.get  [
ans3b: solve3B inputstr
print [~"|year| |day| b: " (ans3b)] ; 2 less bc of white line in end
]

print(~"Time to parse:  \n |year|\\|day|parse) |t0| \n Time to solve: \n |year|\\|day|a) |t2| \n |year|\\|day|b) |t1|")
