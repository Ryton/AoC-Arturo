#!/home/grimalkin/.arturo/bin/arturo -
do "../helperfiles/GetAoCData.art"
year: 2023
day: 10

t0:  benchmark.get [
    
inputstr: chop read ~"../data/input|year|_|day|.txt"; for B


i: to :complex [0 1]  ; base 2D formation
startdirs:@[1 0-1   0-1*i  0+1*i]
print ["startdirs: " startdirs]


;; full example input
 inputstr: inputstr
 startpos:  55+38*i  ;; hardcoded pos of S here and below!! (like 313)
 
 dir: startdirs\2  
 dir: startdirs\3  
 
 Srepaceletter: "I"
 
; 2 3 for demo & real 7086
; dir: startdirs\3  ; 0 a,d 3 for demo & real  7086

; basic:{
; ..F7.
; .FJ|.
; SJ.L7
; |F--J
; LJ...}


;;toy example
; simpledemostr:
; {-L|F7
; 7S-7|
; L|7||
; -L-J|
; L|-JF}


;; example input 0
;inputstr: simpledemostr
;startpos: 1+1*i
;dir: startdirs\0  ; 0 a,d 3 for demo
;dir: startdirs\3  ; 0 a,d 3 for demo
; 2 out of 4 should give identical results



;; part 2; ex3 toy example
;; example input 23
ex3:
{...........
.S-------7.
.|F-----7|.
.||.....||.
.||.....||.
.|L-7.F-J|.
.|..|.|..|.
.L--J.L--J.
...........}
inputstr: ex3
startpos: 1+1*i
dir: startdirs\0  ; 0 a,d 3 for demo
dir: startdirs\3  ; 0 a,d 3 for demo
Srepaceletter: "F"
; answ : 4 4 should give identical results ==> OK



;; example input 4
; ex4:
; {
; .F----7F7F7F7F-7....
; .|F--7||||||||FJ....
; .||.FJ||||||||L7....
; FJL7L7LJLJ||LJ.L-7..
; L--J.L7...LJS7F-7L7.
; ....F-J..F7FJ|L7L7L7
; ....L7.F7||L7|.L7L7|
; .....|FJLJ|FJ|F7|.LJ
; ....FJL-7.||.||||...
; ....L---J.LJ.LJLJ...} 

; inputstr: ex4
; startpos: 12+4*i ;  pos s
; Srepaceletter: "F"
; dir: startdirs\3  ; 0 a,d 3 for demo
; dir: startdirs\0  ; 0 a,d 3 for demo







;; last example input

; exlast:
; {FF7FSF7F7F7F7F7F---7
; L|LJ||||||||||||F--J
; FL-7LJLJ||||||LJL-77
; F--JF--7||LJLJIF7FJ-
; L---JF-JLJIIIIFJLJJ7
; |F|F-JF---7IIIL7L|7|
; |FFJF7L7F-JF7IIL---7
; 7-L-JL7||F7|L7F-7F7|
; L.L7LFJ|||||FJL7||LJ
; L7JLJL-JLJLJL--JLJ.L}
; inputstr: exlast
; startpos: 4+0*i
; Srepaceletter: "Z"
; dir: startdirs\2  ; 0 a,d 3 for demo
; dir: startdirs\3  ; 0 a,d 3 for demo
; ; ;2 out of 4 should give identical results


print["startpos: " startpos]

linestart: to :integer startpos\1
lrstartpos: to :integer  startpos\0
print["linestart: " linestart]
print["lrstartpos: " lrstartpos]

;print inputstr
;print ["i:" i] 
 

;straights
I: @[(0-1)*i   1*i   ]
_: @[(0-1)+0*i   1+0*i   ]
;corners:
F: @[0+1*i   1+0*i ]
L: @ [0-1*i   1+0*i ]
J: @[0-1   (0-i)  ]
Z: @[0-1+0*i   (0+i)   ] ; for seven., top right corner

print ["mapping: ""| :"@I "-:" @_ "F:" @F "L:"@L" J:" @J "7:"@Z]
lookup: #["I":I "_":_ "F":F "L":L "J":J "Z":Z]
; todo: swap | => I , and 7 => Z
print " "
; parse inputstr w other symbols
inputstr: replace inputstr {/7/} "Z"
inputstr: replace inputstr {/\|/} "I"
inputstr: replace inputstr {/-/} "_"
;print inputstr
print " "
inputstr: split.lines inputstr
;print inputstr
]


solveA: $[inputstr,startpos,dir][
startline: inputstr\[linestart]
print [ "startline:" startline]

startsymb: startline\[lrstartpos]
print [ "startsymbol:" startsymb]


pos: startpos + dir

print ["startpos:" startpos]
print ["nextpos:" pos]

route: []
'route ++ (startpos)
'route ++ (pos)


    loop 2..99999 'it [

            lr: to :integer (pos\0) ; real: left right
            ud: to :integer (pos\1) ; imag: up down.

            line: inputstr\[ud]
            symb: line\[lr]

            if not? key? lookup symb [
                    print ["Found "symb]
                    print it
                    print "Made full circle (symbol)"
                    print ["Max distance:" (it)/2]
                    return route
                    ]
            
            poss: lookup\[symb]
            ;print [ "poss: "poss]

            ;print ["poss" poss]
            dirA: poss\[0]
            dirB: poss\[1]
            
            posA: pos + dirA
            posB: pos + dirB
            ;print ["  posA: "  posA]
            ;print ["  posB: "  posB]
            prev: first (last.n:2 route)
            ;print ["prev: " prev]

            if? (prev=posA) 
                ['route ++ posB 
                'pos: new posB
                ;print ["new pos: " posB]
                ]
            else  [
                'route ++ posA
                'pos: new posA
                ;print ["new pos: " posA]
                ]
            ;print ["startpos " startpos "pos "pos  "bool: "@(pos=startpos)]
            ;print startpos
        if (pos=startpos) [
                print "made full circle"
                print ["Max distance:" (it)/2]
                return route]
        ]
]
    





solveB: $[pathfollowed nlines ncols][
isin: false
updown: ""
currpoint: 0+0*i
canbenest: [] ; full grid => eliminate!
storeinout: []
storeinoutline:[]
print "Do 10b"
    loop (0..(dec nlines)) 'rpos [
        'isin: false


        print [rpos "/" nlines]
        loop (0..(dec ncols)) 'cpos [
    
        'currpoint: (cpos + rpos*i)
        
        linesegment: (inputstr\[rpos])
        symbol: (to :char (linesegment\[cpos]))
        if? (in? currpoint @pathfollowed) [  ;if on path => toggle in/out if needed.
            linesegment: (inputstr\[rpos])
            symbol: (to :char (linesegment\[cpos]))
            c1: (equal? symbol  to :char "I")
            c2: (equal? symbol  to :char "F")
            c3: (equal? symbol  to :char "L")
            c4: (equal? symbol  to :char "Z")
            c5: (equal? symbol  to :char "J")
            ;print [c1]
            if (c1) ['isin: not? isin]
            if any? @[c2 c3] [ 'updown: to :char symbol]
            if any? @[c4 c5][
                                if (equal? updown to :char "F") [
                                    'updown: ""
                                    if (equal? symbol to :char "J") [
                                            'isin: not? isin
                                    ]
                                ]
                                 if (equal? updown to :char "L" ) [
                                    if (equal? symbol  to :char "Z") [
                                            'isin: not? isin
                                    ] 
                                    ;else no flip 
                                    'updown: " "
                                ]
                            ]
                ]
        else [if (isin) ['canbenest ++ currpoint   ;print ["added: "currpoint]  ]]

        'storeinoutline ++ isin
        ]
        
        
        'storeinout ++ storeinoutline
        'storeinoutline: []
        
    ]

        ]
        ]
print ["solution size:" size canbenest]
return canbenest
]

;; alternative try, that failed...


t1: benchmark.get  [ 
    pathfollowed: solveA inputstr startpos dir
    print [~"|year| |day| a: " ( ((size pathfollowed)-1)/2)] 
]


t2:  benchmark.get  [ 


    ;; for each point on grid
    ;;
    ;;sum count of crosings between
    ; - line from left axis to point (excl point) 
    ; - pathfollowed    
    ;  . if uneven => in
    print "Start B solve:"


    slinepos: 1 ; 38 for real example
    ;linewithS: (inputstr\38)
    linewithS: inputstr\1



    replace 'linewithS {/S/} Srepaceletter
    inputstr\1: linewithS ; 38
    ;print inputstr
    print "start B solve"
    solB:  solveB  pathfollowed  (size inputstr)  (size (inputstr\0))
    ;print pathfollowed
    ;print solB
    
    print [~"|year| |day| b: " ( size solB)] ; 1392; 1326 too high  X 1353 x 1414
]


; loop 0.. (dec size (inputstr)) 'linenr [
;     print (:color :red inputstr\[linenr] )
;     ]

print(~"Time to parse: \n |year|\\|day|parse) |t0| \n  Time to solve: \n |year|\\|day|a) |t1| \n |year|\\|day|b) |t2|")


    ; color it all! (small example first)
    
    fullmap: []
    animallair: solB
    inspect fullmap
    loop.with: 'x inputstr [aline][
        
        line: aline
        print aline
        loop.with: 'y line [l] [
; a: color #green « te
            achar: new l    
            coloredstr: "X"
            inspect l
            if? (in? (x+i*y)  pathfollowed) [
                'coloredstr: (color #green (to :string achar))
                ]
            else [ 
                    if? in? (x+i*y)  animallair [ 
                    'coloredstr: (color #blue (to :string achar))
                    else [
                        'coloredstr: (color #orange (to :string achar))
                        ]                        
                    ]
                ]
            'fullmap ++ @[coloredstr]

            ]
            'fullmap  ++ ["/n"]
    ]

; idea: join array  of color + #color + text
; a: color #green « te
; b: color #red   « ST

; print a ++ b
; print ~"|a||b|"

; print append color #green "te" color #red "ST"
; print (color #green "te") ++ (color #red "ST")

; print ~{|color #green "te"||color #red "ST"|}

  inspect fullmap

print wordwrap join  fullmap