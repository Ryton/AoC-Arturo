#!/home/grimalkin/.arturo/bin/arturo -e
;==========================================
; Advent of Code solution 
;
; @file: tools/<year>_<day>.art (or default)
; @author: Mixomycetes
;==========================================

FilenamewoExtention: first split.by:"." last split.by:"/" env\_ ; eg /mnt/c/Users/Grim/AoC/2023/2023_1.art'
[year,day]: split.by:"_" FilenamewoExtention   ; 2023 1 ;print [day,year]

do "../helperfiles/GetAoCData.art"  ; this fetches the inputfile and stores it to disk.

;; real example
inputstr: chop read.lines ~"../data/input|year|_|day|.txt"; for B

;; toy example
;inputstr: chop read.lines ~"../data/demoinput.txt"


seeds: (split.by: " " strip last (split.by: ":" inputstr\0)) | map  'x -> to :integer x

bruteforce_expandseeds: $[seeds] [
            seeds2: []            
       
            loop.with: 'i seeds [start len] [
                        loop (start..start+len-1) 'i [ 'seeds2 ++ i]
                        ]

            return  seeds2
            
 ]

order: "osfwlthp"

parse: $[inputstr][
transfermap:#[]
inputstr: drop inputstr ; remove seeds line
it: neg 1
newlist: []

loop.with: 'i  inputstr 'lines [
    if? not? zero? size(lines)[
        if? (in? lines\[0] "0123456789") [
            strlist: split.by: " " lines
                'newlist ++ @[map strlist 'l -> to :integer l]
            ]
        else [        
             pos: order\[it]

            if? not? zero? size newlist [
                    transfermap\[pos]: newlist
             ] 
             inc 'it
             'newlist: []
            ]

        ]
]
transfermap\["p"]: newlist
return transfermap
]



calcnext: $[val tripletlist][
    
loop tripletlist [L] [
    if between? val (L\1) (L\1 +(L\2)) [ return (val+ (L\0) -L\1)]      ]
return val  ; if not exited earlier
]

calcprev: $[val tripletlist][

loop tripletlist [L] [
    if between? val (L\0) (L\0 +(L\2)) [ return (val+ (L\1) -L\0  )]
    ]
    return val ; if not exited earlier
]

solveA: $[seeds transfermap][
 seeds  | map 's [ 
            s   | calcnext transfermap\["o"]  
                | calcnext transfermap\["s"]  
                | calcnext transfermap\["f"]  
                | calcnext transfermap\["w"]  
                | calcnext transfermap\["l"]  
                | calcnext transfermap\["t"]  
                | calcnext transfermap\["p"]  
         ]
        | min
]


 expandseeds: $[seeds] [
            seeds2: []            
            loop.with: 'i seeds [start len] [
                        ;loop (start..start+len-1) 'i [ 'seeds2 ++ i]
                         'seeds2 ++ start 
                         'seeds2 ++ start+len
                        ]
            return  seeds2
            
 ]


;; work in progress still!
solveBwiterations: $[transfermap,order,initpoints,nupdowns][
    currpoints: initpoints
    a: @(1..nupdowns)
    print a 
    loop a 'curr [    
                if? even? curr%2 [ 
                        print ["down" size initpoints]
                            currpoints: currpoints  | map 's [ 
                                                s   | calcprev transfermap\["p"]  
                                                    | calcprev transfermap\["t"]  
                                                    | calcprev transfermap\["l"]  
                                                    | calcprev transfermap\["w"]  
                                                    | calcprev transfermap\["f"]  
                                                    | calcprev transfermap\["s"]  
                                                    | calcprev transfermap\["o"]  
                            print currpoints
                    ]
                    ]
                else [
                    print ["up: " size initpoints]               
                    currpoints: currpoints  | map 's [ 
                                        s   | calcnext transfermap\["o"]  
                                            | calcnext transfermap\["s"]  
                                            | calcnext transfermap\["f"]  
                                            | calcnext transfermap\["w"]  
                                            | calcnext transfermap\["l"]  
                                            | calcnext transfermap\["t"]  
                                            | calcnext transfermap\["p"]  
                    print currpoints
                ]
                ]
]
return min currpoints
]

;solveBwiterations transfermap order initpoints nupdowns


BrutesolveB: $[seeds transfermap][
 seeds2:  reverse expandseeds seeds 
 print [ "seedlist ready, length: " size seeds2]

loop seeds2 's [
    ;'startto [ 
    ;inspect startto
    ;loop  (startto) 's [
            newval: s   | 
                  calcnext transfermap\["o"]  
                | calcnext transfermap\["s"]  
                | calcnext transfermap\["f"]  
                | calcnext transfermap\["w"]  
                | calcnext transfermap\["l"]  
                | calcnext transfermap\["t"]  
                | calcnext transfermap\["p"]  
         if (greater? currmin newval) [ ;print newval
                                        'currmin: newval] 
                                        ]
 return currmin       
]


;; seedlims global
checkifseed: $[newval seedlims] [
   
]


smarter5B: $[currbest downto transfermap  seedlims stepsize][
 ;seeds2:  reverse expandseeds seeds 
 ;print [ "seedlist ready, length: " size seeds2]
currmin: currbest
;print ["start min: " currmin]

loop (currbest..downto).step: neg stepsize 's [
    ;'startto [ 
    ;inspect startto
    ;loop  (startto) 's [
        ;print s

            newval: s   
                        | calcprev transfermap\["p"]  
                        | calcprev transfermap\["t"]  
                        | calcprev transfermap\["l"]  
                        | calcprev transfermap\["w"]  
                        | calcprev transfermap\["f"]  
                        | calcprev transfermap\["s"]  
                        | calcprev transfermap\["o"]  
            ;print [s "=>" newval]

            if (some? seedlims [st end] [between? newval st end]) [
                                if greater? currmin (s-1) [
                                'currmin: new s -1
                                    s1: s -1
                                    s2: s1 | calcprev transfermap\["p"]  
                                    s3: s2| calcprev transfermap\["t"]  
                                    s4: s3| calcprev transfermap\["l"]  
                                    s5: s4| calcprev transfermap\["w"]  
                                    s6: s5| calcprev transfermap\["f"]  
                                    s7: s6| calcprev transfermap\["s"]  
                                    s8: s7| calcprev transfermap\["o"]  

                                 print ["BETTER MIN: " currmin ];"trajectory" s1 s2 s3 s4 s5 s6 s7 s8 
                                    
                                 
                                 
                                 ] 
                                    ]
                                if equal? currmin (s-1) [
                                    print ["min confirmed: " currmin] 
                                    ]
            ]
    
                
return currmin
]


 t0: benchmark.get [
transfermap: parse inputstr
 ]

 print[ "transfermap:" transfermap]
 t1: benchmark.get [

 solA: solveA seeds transfermap
 
  print [~"|year| |day| a: " solA] 
  ] 
    
     seedlims: expandseeds seeds
print ["seedlims"seedlims]

;new min:  37385000 
;new min:  37384990 

; partial manual tuning/initialisation
{
    ; answer a
318728750

best answer b so far: 
37385051
31872890
37384988 ; confirmed
?31872890
37384989
37384988
37384987
}
;solbest:  37384988
; solution on my example: 37384986
solbest: to :integer  solA*2 ; 37384986+50 ;100

print["input" solbest]
  ;37384990 ; too high.
;37384990
;37385750
;318728750 ; min [50] 

t2: benchmark.get  [
primes: reverse  select select @(2..1500) => prime?  => less? 10000
print primes
; 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 
;223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 


loop primes 'stepsize [
    print(stepsize)
    downto:  min [0 stepsize**2]
    solbest: smarter5B solbest downto transfermap seedlims stepsize
    print("best:" solbest)
]

solB: solbest

 
  print [~"|year| |day| b: " solB];smarter5B solbest transfermap seedlims stepsize] ;BrutesolveB seeds transfermap]


            newval: s   
                            'currmin: new s -1
                                    s1: s -1
                                    s2: s1 | calcprev transfermap\["p"]  
                                    s3: s2| calcprev transfermap\["t"]  
                                    s4: s3| calcprev transfermap\["l"]  
                                    s5: s4| calcprev transfermap\["w"]  
                                    s6: s5| calcprev transfermap\["f"]  
                                    s7: s6| calcprev transfermap\["s"]  
                                    s8: s7| calcprev transfermap\["o"]  
print ["trajectory" s1 s2 s3 s4 s5 s6 s7 s8 ]
 ; print [ ( solveBwiterations seeds transfermap order initpoints ndownups)] 
 ]

print(~"Time to parse:  \n |year|\\|day|parse) |t0| \n Time to solve: \n |year|\\|day|a) |t2| \n |year|\\|day|b) |t1|")
