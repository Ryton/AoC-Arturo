#!/home/grimalkin/.arturo/bin/arturo -

year: 2023
day: 16
do "../helperfiles/library.art"

demoex: split.lines {.|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....}

parse: $[day,year][
;    do "../helperfiles/GetAoCData.art"
    inputstr: chop read.lines ~"../data/input|year|_|day|.txt"; for B
    ;inputstr: demoex
    return inputstr
]
;inspect inputstr

calcnextpos: [beampos beamdir][
; => changes the global set #energized!
return (beampos + beamdir) ; complex nr. 
]

addtosteps: $[ currpos newdir][
    newpair: [(currpos+newdir) newdir]
   return @[@newpair]
]
                                                        
                                                        

iteratenextlist: $[nextsteps][
    
    followingsteps: []
    loop.with: 'pairit @nextsteps 'pairs [        
                beampos: (first pairs)
                beamdir: (last pairs)
                currpos:  beampos
                ;print ["  pos:" beampos]

                if (key? grid (to :string currpos))[
                    symbol: grid\[ (to :string currpos)]
                    ;print ["currpos " currpos "symbol " symbol]
                    
                    ;print ["newpair " @newpair   ]
                    ;inspect symbol
                    case [(symbol)]
                        when? [= to :char "."] ['followingsteps ++  addtosteps  (currpos)  (beamdir)
                        
                                                ]
                        when? [= to :char {\}] [
                                                ; to debug these!
                                                ; 1 0  =>  0 1 
                                                 ; -1 0 =>  0 -1 
                                                 ;  0 1 =>  1 0
                                                 ; 0 -1 =>   -1 0 
                                                 'followingsteps ++ addtosteps (currpos) (to :complex @[ beamdir\im beamdir\re])
                                                
                                                ]
                        when? [= to :char "/"] [
                                                ; to debug these!
                                                 ; 1 0  =>  0 -1 
                                                 ; -1 0 =>  0 1 
                                                 ;  0 1 =>  1 0
                                                 ; 0 -1 =>   -1 0 
                                                 ;
                                                'followingsteps ++ addtosteps (currpos) (to :complex @[neg beamdir\im  neg beamdir\re])
                                                
                                                ] 
                        when? [= (to :char "|")] [  ; OKs
                                                if? (abs (beamdir\im)) > 0.9  [  ; then beam came in vert => pass on 
                                                        'followingsteps ++ addtosteps (currpos) (beamdir)                                                       
                                                ]
                                                else [;split up down
                                                        'followingsteps ++ addtosteps (currpos) (to :complex @[0 neg 1])
                                                        ;print ["newpair "newpair]                                                        
                                                        'followingsteps ++ addtosteps (currpos) (to :complex @[0 1])
                                                        ;print followingsteps
                                                    ]
                                                ]

                        when? [= to :char "-"] [ if?  (abs (beamdir\re)) > 0.9 [ ; then beam hor => pass on
                                                        'followingsteps ++ addtosteps currpos beamdir
                                                            
                                                        ]   
                                                else [;split left right
                                                        newdir: (to :complex @[neg 1 0])
                                                        'followingsteps ++ addtosteps currpos newdir
                                                        newdir: (to :complex @[1 0])
                                                        'followingsteps ++ addtosteps currpos newdir
                                                    ]
                        ]

                ]
                    
        ]
    
    return followingsteps
]


solveA: $[inputstr nextsteps][

    ;inputstr: demoex
    X: size inputstr
    Y: size first inputstr
    grid: #.raw flatten
        map 0..dec X 'x [  ; cols
        map 0..dec Y 'y [ ; rows
            @[(to :string (to :complex @[y x]))  inputstr\[x]\[y]  ]
        ] ] 

    ;inspect grid

    ;print ["start step: "nextsteps]
    visited:[]
    ;'energized ++ @[map nextsteps 'pairs [first pairs]]

    ;  print  iteratenextlist nextsteps
    loop 1..1000 'it[
        if all? @[(it > 4) (zero? size nextsteps)] [ break]
        ;print ["------------ iteration: " it "------------ "]
        
        'nextsteps: iteratenextlist nextsteps      
        if (it%100)=0 [difference 'nextsteps visited] ; remove points w directions already visited previously (this should remove loops)

        ;print ["next steps: " nextsteps] 
        
            
            union 'visited nextsteps; or just add em all, but chances are that they fall out of the grid => one time-costly check after! ;union 'visited nextsteps
        ; if (it%499)=5 [unique 'visited]   ; => slow step not needed?
    ]

    cleanvisited:[]

    print ["calc unique"]
    unique 'visited
    print ["filter out of grid"]
    loop visited 'v [
                        if (in? (to :string first v) keys grid )  [
                                'cleanvisited ++ @[v]] ; add nextstep if in grid!
                    ]   
    print ["done"]

    energized: unique flatten  (map cleanvisited  [v] [first v]) ; only keep the keys & throw out doubles

    ;print ["energized " energized]
    print ["size energized " (size energized)]

    return size energized

]
; takes way too long, 10 s or so!

solveB: $[inputstr][

X: size inputstr
Y: size first inputstr 
startpos: []
loop 0..dec X 'x[
    'startpos ++ (to [:complex] [@[0 x] @[1 0]])
    'startpos ++ (to [:complex] [@[dec Y x] @[neg 1 0]])
]

loop 0..dec Y 'y[
    'startpos ++ (to [:complex] [@[y 0] @[0 1]])
    'startpos ++ (to [:complex] [@[y dec X] @[0 neg 1]])
]
print startpos
energies: []
loop startpos 'pos [

    'energies ++ solveA inputstr @[pos]
]
    return min energies
]

t0: benchmark.get  [ 
    inputstr: parse day year
]


t1: benchmark.get  [ 

; one startpos
beampos: to :complex [0 0]
beamdir: to :complex [1 0]
nextsteps: @[@[beampos beamdir]]

    answA: solveA inputstr nextsteps

    print [~"|year| |day| a: "  ( answA )] 
]


t2:  benchmark.get  [ 
    print "Start B solve: (TBC!)"
    poss_starts: []
    
    answB: solveB inputstr

    print [~"|year| |day| b: " answB  ] 
    ]


roundQTT_ms: $[t][to :quantity @[round.to:1 scalar (in `ms t), `ms]]
print(~"Time to parse: \n |year|\\|day|parse) |roundQTT_ms t0| \n  Time to solve: \n |year|\\|day|a) |roundQTT_ms t1| \n |year|\\|day|b) |roundQTT_ms t2|")




