#!/home/grimalkin/.arturo/bin/arturo -

year: 2023
day: 19

demoex: {px{a<2006:qkq,m>2090:A,rfg}
pv{a>1716:R,A}
lnx{m>1548:A,A}
rfg{s<537:gd,x>2440:R,A}
qs{s>3448:A,lnx}
qkq{x<1416:A,crn}
crn{x>2662:A,R}
in{s<1351:px,qqz}
qqz{s>2770:qs,m<1801:hdj,R}
gd{a>3333:R,R}
hdj{m>838:A,pv}

{x=787,m=2655,a=1222,s=2876}
{x=1679,m=44,a=2067,s=496}
{x=2036,m=264,a=79,s=2244}
{x=2461,m=1339,a=466,s=291}
{x=2127,m=1623,a=2188,s=1013}}

parse: $[day,year][
    ;do "../helperfiles/GetAoCData.art"
    inputstr: read ~"../data/input|year|_|day|.txt"; for B
    ;inputstr: demoex
    
    ;inputstr:  split.by: "\n\n"  inputstr 
    ;rules: (strip first inputstr)
    ;scrap: (strip last  inputstr)
    rules: scrap: strip first <= (split.by: "\n\n"  inputstr ) => strip last
    replace 'scrap {/[xmas=\{\}]+/} "" ; 
    replace 'scrap "," " ";

    alist: map split.lines scrap 'item [ flatten map split.by: " "  item 'v [ :integer v ]]

    replace 'rules "}" " x m a s] ";
    replace 'rules {/,/}  " "
    replace 'rules {/([<>=\w]+)[:](\w+)/} {if $1 [$2 x m a s]}
    replace 'rules "{"  ": $[x m a s]["; 

    return @[rules alist]
]


solveA: $[rules alist][

    loop split.lines rules 'rule [ do rule ]
    A: $[x m a s] [return true]
    R: $[x m a s] [return false]
   
    tot: 0
    loop @alist 'xmas[
        [x m a s]: to [:integer] xmas
        accept: first @[(in x m a s)]
        
        if? (accept) [val: x+m+a+s] else [val: 0]
          'tot: tot + val
    ]
    return tot
]

solveB: $[inputstr][
return 0
]


t0: benchmark.get  [ 

[rules alist]: parse day year 

]


t1: benchmark.get  [ 

  print [~"|year| |day| a: "  ( solveA rules alist )] 

]


t2:  benchmark.get  [ 
    print "Start B solve:"
    
answB: 0 ; solveB 

    print [~"|year| |day| b: "  ] 
    ]


roundQTT_ms: $[t][to :quantity @[round.to:1 scalar (in `ms t), `ms]]


print(~"Time to parse: \n |year|\\|day|parse) |roundQTT_ms t0| \n  Time to solve: \n |year|\\|day|a) |roundQTT_ms t1| \n |year|\\|day|b) |roundQTT_ms t2|")




