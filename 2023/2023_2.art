#!/home/grimalkin/.arturo/bin/arturo -e
;==========================================
; Advent of Code solution 
;
; @file: tools/<year>_<day>.art (or default)
; @author: Mixomycetes
;==========================================

FilenamewoExtention: first split.by:"." last split.by:"/" env\_ ; eg /mnt/c/Users/Grim/AoC/2023/2023_1.art'
[year,day]: split.by:"_" FilenamewoExtention   ; 2023 1 ;print [day,year]
;print "reading input..."

posscol: ["r" "g" "b"]
refdict: #[ "r":12, "g":13,"b":14]

demoinput: {Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green}
 
; inputstr: read.lines ~"input|year||day|.txt"; for B
; print demoinput
inputstr: chop read ~"input|year|_|day|.txt"; for B

; print inputstr

parse: $[inputstr][
    dictlist:[]
    ll: split.lines inputstr
    ;print [~"|size ll| lines read"]
    patterns: [ {/red/} {/green/} {/blue/} {/Game/}]
    newval: ["r"  "g" "b" "s"]
    todict: $[x,y][adict\[x]:adict\[x] + to :integer y]
    ; structure: experiment (one line) => samples => onedraw => pairs)
    loop.with: 'i ll 'line [ ; line == one experiment.
            line: replace line (patterns\[0]) (newval\[0])  ; red to r
            line: replace line (patterns\[1]) (newval\[1])  ; green to g
            line: replace line (patterns\[2]) (newval\[2])  ; blue to b
            line: replace line (patterns\[3]) (newval\[3])  ; Game to s
            exp: split.by: ":" line
            expId: to :integer last split.by: " " exp\0
            ;print ~"exp_id |expId|:"
            samples: split.by: ";" exp\1
            ;inspect samples
            adict: #["r":0 "g":0 "b":0 ]

            loop samples 'onedraw [   
                pairs: split.by:"," onedraw
                ;print "pairs:"
                ;inspect pairs      
                loop pairs 'pair [
                    amountcolor: split.by:" " strip  pair
                    amount: to :integer  amountcolor\[0] 
                    color: amountcolor\[1]
                    ;print color
                    adict\[(color)]: (max @[(adict\[(color)])  (to :integer amount)])
                ]
            ]
            'dictlist ++ adict
    ]
    return dictlist
]

    ;print dictlist
solve_A: $[dictlist][


    possibles: []
    loop.with: 'expId dictlist 'adict [
        ;print adict
    ;12 red cubes, 13 green cubes, and 14 blue cubes?
        
        ;print refdict
        check1: (refdict\["r"] >= adict\["r"])
        check2: ( refdict\["g"] >= adict\["g"])
        check3: ( refdict\["b"] >= adict\["b"])
        check:  (all? @[check1 check2 check3])
        
        if check [ ;print [~"added |expId|"]
                'possibles ++ (expId+1) 
                
    ]
    
]
return (sum possibles) ; 4298,3631 too high.
]


solve_B: $[dictlist][

    powers: []
    loop dictlist 'adict [
                power: adict\["r"]*adict\["g"] * adict\["b"]
                'powers ++  power
    ]
    return (sum powers ) ; 4298,3631 too high.
]



dictlist: parse inputstr
;print(dictlist)


t1: benchmark.get [
 print [~"|year| |day| a: " (solve_A dictlist)] ; 2 less bc of white line in end
 ]
t2: benchmark.get  [
 print [~"|year| |day| b: " (solve_B dictlist)] ; 2 less bc of white line in end
]

print(~"Time to solve: \n |year|\\|day|a) |t2| \n |year|\\|day|b) |t1|")
