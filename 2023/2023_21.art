#!/home/grimalkin/.arturo/bin/arturo -
;; ;==========================================
;; Advent of Code solution 
;;
;; @file: tools/<year>_<day>.art (or default)
;; @author: Mixomycetes
;;
;; Disclaimer: this code is pretty, nor effective!
;; But i use the challenges as a springboard learn concepts :)
;; ==========================================



;; ============ GLOBAL CONSTANTS ===============
year: 2023
day: 21

RunExample: true ; true = toy example input. false = using own input
verbose: true  ; terminal log puke
plot: true ; terminal plotting (w colors :D)
solveNaive: false  ; fails on example. False = using dijkstra! (fails on input :D)



; ============ HELPER FUNCTIONS  ===============
parse: $[day,year][
    do "../helperfiles/GetAoCData.art"
    demoex: 
    {...........
    .....###.#.
    .###.##..#.
    ..#.#...#..
    ....#.#....
    .##..S####.
    .##..#...#.
    .......##..
    .##.#.####.
    .##..##.##.
    ...........}



    (RunExample)? -> inputstr: demoex -> inputstr: split.lines read ~"../data/input|year|_|day|.txt"; for B
    grid: split.lines inputstr
    return grid
]

dirlist:  @[@[1 0] @[ 0 (neg 1)] @[neg 1 0] @[0 1]]
;inspect dirlist

plotGridwVisited: $[grid visitedlist][
    padding: 1
    acolor: [#green #red #blue] ; randomised color pick for reached states.
    prints repeat [pad repeat "_" padding padding] nrows
    loop 0..dec nrows 'x[
    print ""
        
        
        prints "|"

        loop 0..dec ncols 'y [ 
            symbol: to :string (grid\[x]\[y])
            if (in? x+y*nrows visitedlist) [symbol: (to :string color sample acolor "O") ]
            prints @[pad symbol padding]
        ]
        prints "|"
    ]
    print ""
    prints repeat [pad repeat "-" padding padding] nrows
    return 0
    ]


pos2id: $[pos][return pos\0+pos\1*ncols]

solveA_NAIVE: $[grid nsteps Srow Scol][
    evens: select (0..nsteps) => even? &
    print ["positions at n steps from center reachable: "evens]
    visitedlist: []

    nrows: size grid
    ncols: size (grid\[0])
    [totcounter,countocc,counter]:[0 0 0]
    gridlist: flatten.once map 0..dec ncols 'y[map 0..dec nrows 'x  [@[x y]]]
    ; full grid.
    loop gridlist 'pos[
    
        ;print [x y]
        xx: first pos ;(Srow+x)
        yy: last pos ; (Scol+y)
        
        dx: xx-Srow
        dy: yy-Scol
        ;id: pos2id pos
        
        ; check validity
        ;  (xx <=> 0 (dec nrows)) ; valid row 
        
        c1: ((abs dx) + (abs dy)) < inc nsteps ;  (yy <=> 0 (dec ncols)) ; valid col
        c2:  even? ((abs dx) + (abs dy) )  ; n steps from center.
        c3:  (abs dx) < inc nsteps
        c4:  (abs dy) < inc nsteps
        if? all? @[c1 c2 c3 c4] [
            inc 'totcounter
            ;print "on grid"
            symbol: (grid\[yy]\[xx])
            ;print symbol
            occupied: (symbol = (to :char "#"))
            (occupied)? 
                [inc 'countocc if verbose [ print [xx,yy symbol "=> NOT OK."]]]
                [inc 'counter if verbose [print [xx,yy symbol "=> OK."
                'visitedlist ++ @[pos\0 + (nrows *pos\1)]  
                
                ]]]

            ]


    ]
    print   [counter "(.S) +" countocc "(#) = " totcounter]
     ; print  visitedlist
;; visualisation 

; 0] [8126] [8388] [8650] [8912] [7996] [8258] [8520] [8782] [9044] [7866] [8128] [8390] [8652] [8914] [9176] [7736] [7998] [8260] [8522] [8784] [9046] [9308] [7606] [7868] [8130] [8392] [8916] [9178] [9440] [7476] [7738] [8000] [8524] [8786] [9048] [9310] [9572] [7346] [7608] [7870] [8132] [8656] [8918] [9180] [9442] [9704] [7216] [7478] [7740] [8002] [8526] [8788] [9050] [9312] [9574] [9836] [7086] [7348] [7610] [7872] [8134] [8396] [8658] [8920] [9182] [9444] [9706] [9968] [6956] [7218] [7480] [8004] [8266] [8528] [9052] [9314] [9576] [9838] [10100] [6826] [7088] [7350] [7612] [7874] [8136] [8398] [8660] [8922] [9184] [9446] [9708] [9970] [10232] [6696] [6958] [7220] [7744] [8006] [8268] [8530] [8792] [9054] [9316] [9578] [9840] [10102] [10364] [6566] [6828] [7090] [7352] [7614] [7876] [8400] [8662] [9186] [9710] [10234] [10496] [6436] [6698] [6960] [7222] [7484] [7746] [8008] [8270] [8532] [8794] [9056] [9318] [9842] [10104] [10366] [10628] [6306] [6568] [6830] [7354] [7616] [7878] [8140] [8664] [9188] [9450] [9712] [9974] [10236] [10498] [10760] [6176] [6438] [6700] [6962] [7224] [7486] [7748] [8010] [8272] [8534] [8796] [9320] [9582] [9844] [10106] [10368] [10630] [10892] [6046] [6308] [6832] [7094] [7356] [7618] [7880] [8142] [8404] [8666] [8928] [9190] [9452] [9714] [9976] [10238] [10500] [10762] [11024] [5916] [6178] [6440] [6702] [7226] [7488] [7750] [8012] [8274] [8536] [8798] [9322] [9584] [10370] [10632] [10894] [11156] [5786] [6048] [6310] [6572] [6834] [7358] [7620] [7882] [8406] [8668] [9192] [9454] [9716] [9978] [10240] [10502] [11026] [11288] [5656] [5918] [6180] [6442] [6704] [6966] [7228] [7490] [7752] [8014] [8276] [8538] [8800] [9062] [9324] [9586] [9848] [10110] [10372] [10634] [10896] [11158] [11420] [5526] [5788] [6050] [6312] [6836] [7360] [7622] [7884] [8146] [8408] [8670] [8932] [9456] [9718] [9980] [10242] [10766] [11028] [11290] [11552] [5396] [5658] [5920] [6182] [6444] [6706] [6968] [7230] [7754] [8016] [8278] [8540] [8802] [9326] [9588] [9850] [10374] [10636] [11422] [11684] [5266] [5528] [5790] [6052] [6314] [6576] [6838] [7100] [7362] [7624] [7886] [8148] [8410] [8672] [9196] [9720] [10244] [10506] [10768] [11030] [11292] [11554] [11816] [5136] [5398] [5660] [5922] [6184] [6446] [6708] [6970] [7232] [7494] [7756] [8280] [8542] [8804] [9066] [9328] [9590] [10114] [10376] [10638] [10900] [11162] [11424] [11686] [11948] [5006] [5268] [5530] [5792] [6054] [6316] [6578] [7102] [7364] [7626] [7888] [8150] [8412] [8674] [8936] [9198] [9460] [9722] [9984] [10770] [11294] [11556] [11818] [12080] [4876] [5138] [5400] [5662] [5924] [6186] [6448] [6710] [6972] [7758] [8020] [8282] [8544] [8806] [9068] [9330] [9592] [9854] [10116] [10378] [10640] [10902] [11164] [11426] [11688] [11950] [12212] [4746] [5008] [5270] [5532] [6318] [6580] [6842] [7104] [7366] [7628] [7890] [8152] [8414] [8938] [9200] [9462] [9724] [10510] [11034] [11558] [12082] [12344] [4616] [4878] [5140] [5664] [6450] [6712] [6974] [7498] [7760] [8022] [8284] [8546] [9070] [9332] [10118] [10380] [10642] [10904] [11166] [11690] [11      
nrows: size grid
ncols: size (grid\[0])

if (plot)[
    plotGridwVisited grid visitedlist

]


    return counter
]


solveA_dijkstra: $[grid nsteps Srow Scol][
    splitmap: map grid 'row [map  row 'l [(l = "#")? [100][1]]]

    ;Srow: 5
    ;Scol: 5
    nrows: size grid
    ncols: size grid\0 ; this is a row, grid[x] is a col coord. => grid [y][x] is correct!
  

    nD: #[]
    tovisitL: []
    loop 0..(dec ncols*nrows) [id] [
        
        set nD id #[
        cost:99 
        pathto: "" ; string into this . "LRUD" 
        visited:false
        ]
        'tovisitL ++ @[id]
        ]

        ;inspect tovisitL
    nD\[Srow+Scol*nrows]\cost: 0 
    nD\[Srow+Scol*nrows]\pathto: "S" ; string into this . "LRUD" 
    ;print (nD\[Srow+Scol*ncols])
    ;inspect nD
    

        
    dirdict: #["R": @[1 0] "U":@[ 0 (neg 1)] "L":@[neg 1 0] "D": @[0 1]]

    ;;;;; actual dijkstra: but fails atm, still a bug!


    print "Enter the loop"
    print [Srow Scol]
    tovisitL: @[Srow+Scol*nrows]
    niter: 0
    visitedlist:[]
    ;loop 1.. 1000 '_ [
    while [(size tovisitL)>0][

        inc 'niter

        print  ~"iteration |niter|/max |ncols|"
        print [" left:"size tovisitL ]
        ;pick  a node to visit (first unvisited w lowest cost!)
        mincost: min sort map tovisitL [id] [nD\[to :string  id]\["cost"]]
        ;only use those
        ;print ["mincost: " mincost ]

        minID: first select tovisitL [id] [(equal? (nD\[to :string id]\["cost"]) (mincost))]
        ;print ["mincost check: " minnode\cost ]
        currnodeID: new minID
        ;minnode: nD\[minID]
        ;print [mincost minID  minnode ]
        ;(keys minnode)\[0]
        [y x]: currnodeID  /% (nrows) ;xycoords of node
        ;print ["checking paths around " x y ]

        loop "RLUD" 'dir [ 
            ;print [dir "from node "x ", "y ] go all directions and check
            out: dirdict\[dir]
            prevdir: last (nD\[currnodeID]\["pathto"])
            i:  new (first out)
            j:  new (last out)(x+i)
            
            OK: true
            checkID: (x+i)+(j+y)*(ncols) ;; new target
            ;print ["prevdir" prevdir "dir" dir]
            if any? @[ 
                ;   (all? [(i<0) prevdir= "R"] )  
                ;   (all? [(i>0) prevdir= "L"] ) 
                ;   (all? [(j<0) prevdir= "D"] )  
                ;   (all? [(j>0) prevdir= "U"]) 
                (not? ((x+ i) <=> 0  dec nrows)) 
                (not? ((y+j) <=> 0  dec ncols))
            ]
            [ OK:false
            ;print "failed one"
            ]  ; node is invalid, thus skip (for now).
            
            ;print [(x+ i), y+j*nrows]
            if OK [
                symbol: to :char grid\[x+ i]\[y+j]
                if (symbol = to :char "#") [
                    OK: false
                    ;print "rock present"]
                ]  ; second check after confirmed on grid
            ;print OK
            if OK [
                curval: (nD\[checkID]\["cost"])
                sourceval: nD\[currnodeID]\cost
                delta: splitmap\[(x + i)]\[(y+j)] 
                newval: (sourceval + delta)
                curpath: (nD\[currnodeID]\["pathto"])
                newpath:  curpath ++ to :string dir
                if (newval < curval) [
                    checkednode: new #[]
                    
                    checkednode\["cost"]: newval
                    checkednode\["pathto"]: newpath
                    checkednode\["visited"]: false

                    ;if ( lessOrEqual? newval  nsteps)[] ; only check the map area within fasible ranges
                    'tovisitL ++ checkID
                    nD\[checkID]: checkednode
                    if (all? @[( lessOrEqual? newval  nsteps) (mod newval 2) = 0]) ['visitedlist ++ checkID]
                ]

                ] 
            ] ; loop all directions
    

        ; set current node to visited
        remove 'tovisitL currnodeID
        nD\[currnodeID]\["visited"]: true

        ]

    ;print [~"n iterations:  |niter|"]
    
    ;print ["endnode"nD\[dec (nrows* ncols)]
    

    ;inspect costmap
    
    ;print tovisitL ; should be empty
    ;print map tovisitL [id] [nD\[to :string  id]\["cost"]]
    ;print ["endcost: " nD\[13*13]\cost]
    ]
    ; buildcostmap:
    costmap: map.with:'y grid 'row [map.with: 'x  row 'l [ nD\[x+y*nrows]\cost]]
    print ["total map build cost"]
    
    answer: size select.count flatten costmap [v] [all? [(v < nsteps+1) (even? v)]]
    print "# visted nodes: " answer
    if (plot)[
    plotGridwVisited grid visitedlist

    ]

    return  answer
]

solveB: $[grid][
return 0
]



;; ============ MAIN ENTRY POINT  ===============

t0: benchmark.get  [ 
grid: parse day year 
]


t1: benchmark.get  [ 
    nsteps: (RunExample)? -> 6 -> 64 
    ; 3594 right
    ; 3597 wrong.
    Srow:  (RunExample)? ->5 -> 65
    Scol: (RunExample)? -> 5 -> 65

    answA: (solveNaive)? [solveA_NAIVE grid nsteps Srow Scol][solveA_dijkstra grid nsteps Srow Scol]

    
  print [~"|year| |day| a: " (answA)] 
]


t2:  benchmark.get  [ 
    print "Start B solve:" 
    answB: "not solved"
    print [~"|year| |day| b: " (answB) ] 
    ]

roundQTT_ms: $[t][to :quantity @[round.to:1 scalar (in `ms t), `ms]]


print(~"Time to parse: \n |year|\\|day|parse) |roundQTT_ms t0| \n  Time to solve: \n |year|\\|day|a) |roundQTT_ms t1| \n |year|\\|day|b) |roundQTT_ms t2|")

