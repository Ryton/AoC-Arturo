#!/home/grimalkin/.arturo/bin/arturo -
do "../helperfiles/GetAoCData.art"
year: 2023
day: 18

parse: $[day year][
    inputstr: chop read ~"../data/input|year|_|day|.txt"; for B

    demoex:{
    R 6 (#70c710)
    D 5 (#0dc571)
    L 2 (#5713f0)
    D 2 (#d2c081)
    R 2 (#59c680)
    D 2 (#411b91)
    L 5 (#8ceee2)
    U 2 (#caa173)
    L 1 (#1b58a2)
    U 2 (#caa171)
    R 2 (#7807d2)
    U 3 (#a77fa3)
    L 2 (#015232)
    U 2 (#7a21e3)}
   ; inputstr: demoex
return inputstr
]


parseposdict: $[inputstr][

    i: to :complex [0 1]  ; base 2D coordinate system.
    cardinalDirs:#[ "R":1 "L":0-1   "U":0-1*i  "D":0+1*i]
    ;print ["startdirs: " cardinalDirs]

;print inputstr
; parsing
digmap: map split.lines inputstr 'aline [first.n: 2 split.by: " " aline 
                                ]
;inspect digmap


pos: 0+0*i  ;  ;print["startpos: " pos]
posmap: []
posdict: #[]
strtocomplex: #[]
loop.with: 'i digmap 'action [
    times:   to :integer last action
    dirsymbol: first action
    cstep:   cardinalDirs\[first action]

    loop 1..times '_ [ 
        pos: new pos + cstep
        
        case [dirsymbol]
        
            when? [="R"] [symbol: "-"]
            when? [="L"] [symbol: "-"]
            when? [="U"] [symbol: "I"]
            when? [="D"] [symbol: "I"]
        towrite: [pos symbol ]
       ;print ["towrite; " towrite]
        append 'posmap @[@towrite]
        extend 'posdict #.raw @[to :string  pos symbol]
        extend 'strtocomplex  #.raw @[to :string  pos pos] 
        
    ]

    if? (i< dec size digmap) [nextsymbol: first digmap\[i+1] ]
    else   [nextsymbol: first digmap\[0] ]

    corner: (join @[dirsymbol nextsymbol])
    ;print ["corner "corner]
    case [corner]
    when? [="RU"] [symbol: "J"]
    when? [="DL"] [symbol: "J"]
    when? [="LU"] [symbol: "L"]
    when? [="DR"] [symbol: "L"]
    when? [="LD"] [symbol: "F"]
    when? [="UR"] [symbol: "F"]
    when? [="UL"] [symbol: "Z"]
    when? [="RD"] [symbol: "Z"]    
        towrite: [pos symbol]
        ;print ["towrite; " towrite]
        append 'posmap towrite
        extend 'posdict #.raw @[to :string pos symbol]
        extend 'strtocomplex  #.raw @[to :string  pos pos] 
                        
    ;print [first action "=> " cstep "x" times]
]
;inspect unique posmap
;print size posmap
;inspect posdict
;sort 'posdict
return @[posdict posmap strtocomplex]
]


t0:  benchmark.get [
    
inputstr: parse day year
;inspect inputstr
]



solveA: $[posdict posmap strtocomplex ][

xpos: map values strtocomplex 'akey [akey\real] 
ypos: map values strtocomplex 'akey [akey\im]
;print [xpos, ypos]
xmin: to :integer min xpos
rangeX: to :integer  (max xpos) - xmin + 1
ymin: to :integer min ypos
rangeY: to :integer  (max ypos) - ymin +1

;print [xmin rangeX ymin rangeY]
arr:[]
loop 0.. inc rangeY 'y[ ; rows
   arow: ""
   loop 0..inc rangeX 'x[ ; pos on row
 
        thisstrpos: (to :string (to :complex @[x+xmin y+ymin]))
        if? contains? keys strtocomplex thisstrpos [symbol: get posdict thisstrpos]
        else [ symbol: "."]
        'arow  ++ symbol
    ]
    'arr ++ @[arow]

]
;print ["size ARR " size arr size arr\0]
loop arr 'lines [print lines]
;print "Do 18a like 10b:"
i: to :complex [0 1]  ; base 2D coordinate system.
nlines: new rangeX
ncols: new rangeY

storeinoutline: []
storeinout: []
canbenest:[]
pathfollowed: values strtocomplex

        loop (0..rangeY) 'rpos[ ; rows
             storeinoutline: []
        'isin: false
        ;print [rpos "/" nlines]
         loop (0..rangeX) 'cpos[ ; pos on row        
        ;loop (0..(dec ncols)) 'cpos [
        ; print [rpos, cpos]
        'currpoint: (cpos +xmin + (rpos+ymin)*i) ; complex  repr.
        
        linesegment: (arr\[rpos])
        symbol: (to :char (linesegment\[cpos]))
        if? (in? currpoint @pathfollowed) [  ;if on path => toggle in/out if needed.
            linesegment: (arr\[rpos])
            symbol: (to :char (linesegment\[cpos]))
            c1: (equal? symbol  to :char "I")
            c2: (equal? symbol  to :char "F")
            c3: (equal? symbol  to :char "L")
            c4: (equal? symbol  to :char "Z")
            c5: (equal? symbol  to :char "J")
            ;print [c1]
            if (c1) ['isin: not? isin]
            if any? @[c2 c3] [ 'updown: to :char symbol]
            if any? @[c4 c5][
                                if (equal? updown to :char "F") [
                                    'updown: ""
                                    if (equal? symbol to :char "J") [
                                            'isin: not? isin
                                    ]
                                ]
                                 if (equal? updown to :char "L" ) [
                                    if (equal? symbol  to :char "Z") [
                                            'isin: not? isin
                                    ] 
                                    ;else no flip 
                                    'updown: " "
                                ]
                            ]
                ]
        else [if (isin) ['canbenest ++ currpoint   ;print ["added: "currpoint]  ]]

        'storeinoutline ++ isin
        ]
        
        
        'storeinout ++ storeinoutline
        'storeinoutline: []
        
    ]

        ]
        ]

;print ["solution size:" size canbenest]
;print ["edges size:" size posdict]
;print ["dug out:" (size posdict) +(size canbenest)]
return size canbenest
]



t1: benchmark.get  [ 
  out: parseposdict inputstr
  posdict: first out
  posmap: out\1
  strtocomplex: out\2

    answA: solveA posdict posmap strtocomplex
    print [~"|year| |day| a: " answA]  ;31171
]

t2:0
; t2:  benchmark.get  [ 


;     print "Start B solve:"


;     slinepos: 1 ; 38 for real example
;     ;linewithS: (inputstr\38)
;     linewithS: inputstr\1



;     replace 'linewithS {/S/} Srepaceletter
;     inputstr\1: linewithS ; 38
;     ;print inputstr
;     print "start B solve"
;     solB:  solveB  pathfollowed  (size inputstr)  (size (inputstr\0))
;     ;print pathfollowed
;     ;print solB
    
;     print [~"|year| |day| b: " ( size solB)] ; 1392; 1326 too high  X 1353 x 1414
; ]


; loop 0.. (dec size (inputstr)) 'linenr [
;     print (:color :red inputstr\[linenr] )
;     ]

print(~"Time to parse: \n |year|\\|day|parse) |t0| \n  Time to solve: \n |year|\\|day|a) |t1| \n |year|\\|day|b) |t2|")

