#!/home/grimalkin/.arturo/bin/arturo -

year: 2023
day: 12

parse: $[day, year][

inputstr: chop read.lines ~"../data/input|year|_|day|.txt"; for B

; ; toy input
 demoex:{
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1}
;inputstr: split.lines demoex

;print inputstr\0
;print inputstr\1
return inputstr
]


iterativebuilder: $[listsofar, line, pos][
    
    if? (pos = (size line)) [
        return listsofar
                ]
    else[
        symbol: line\[pos]
        pos: pos +1
        ;print [ "pos " pos, symbol]

            if equal? (to :char symbol) (to :char "?") [
                    longerlist:  []
                    loop  listsofar 'alist [
                        ;print ["alist: " alist]
                        'longerlist ++  @[ alist ++ "#"]
                        'longerlist ++  @[ alist ++ "."]
                        ]                         
                    return iterativebuilder longerlist line pos]
            if equal? (to :char symbol) (to :char "#") [
                    longerlist:  []
                    loop  listsofar 'alist [
                        ;print ["alist: " alist]
                        'longerlist ++  @[ alist ++ "#"]
                        ]
                    return iterativebuilder longerlist line pos]
            if equal? (to :char symbol) (to :char ".") [
                    longerlist:  []
                    loop  listsofar 'alist [
                        ;print ["alist: " alist]
                        'longerlist ++  @[ alist ++ "."]
                        ]
                    return iterativebuilder longerlist line pos]
            ]
]





t0:  benchmark.get [
print("Parsing")
;do "../helperfiles/GetAoCData.art"
inputstr: parse day year
]    

solveA: $[inputstr expandntimes][

print "Solving A"
print ["folded out" expandntimes "times"]


lines: inputstr
possperline: []
myData: #[]
loop lines 'tocheck [
;print lines
;tocheck: lines\0
both: split.by: " " tocheck  
grid: both\0
occurlist: split.by: "," both\1

emptylist: [""] ; start w a space
posslist: (iterativebuilder emptylist grid 0)   ; 0 = startpos of search.
anotherregex: map occurlist 'i ["[.]+[#]{" ++ (to :string i) ++ "}"]
'anotherregex ++ "[.]*$"
join.by:"" 'anotherregex
anotherregex\3: "*" ; series doesnt have to start w .
gathered: flatten unique map posslist 'poss [match poss anotherregex]
accepted: select gathered [amatch][(size amatch)=(size grid)]
;myData\[grid]: #["input": @grid
;                "occurlist": @occurlist
;                "answA":  @size accepted
;                "accepted": @accepted
;                 ]
currsize: (size accepted)
'possperline ++ currsize
]
;print myData
;write.json "day2023_12_A.json" myData
return possperline
]

recursivecounter: $[grid occurlist totalsum][
    ; end conditions. work in progress...


    print [grid, occurlist]
    nblocks: size occurlist ; amount of blocks left.
    npointsleft: size grid 
    if all? @[(nblocks)>0 npointsleft<=0] [return  0 ]; fails bc not enough space
    ;if all? @[(nblocks)=0 max(grid)=1] => return  1 ; OK  with all dots (? -> dots.)

    minpointsrequired: (sum occurlist)+ dec size occurlist
    print [npointsleft nblocks  minpointsrequired]
    if (minpointsrequired<npointsleft) [return  0] ; fails
    ;if (minpointsrequired=npointsleft) [return  1] ; done!!
    

    ; normal conditions.
    firstnr: first grid ;".", "?" ""

    nsame: first collect grid 'x [equal? x firstnr]
    nneededinnextblock: first occurlist
    print [firstnr nsame nneededinnextblock ]
   
    if (nsame < nneededinnextblock) [ return 0] 

    print [firstnr  nsame]

    case [firstnr]  ; and possible!
        when? [=0] [ ; 0 or . => remove em and continue
            chop grid nsame  
            add 'totalsum  recursivecounter grid occurlist 0]
        when? [=2] [ ; 2 or X => remove em
                if (min first.n: nneededinnextblock grid) [return 0] ; a zero in the next seris.
                ;else: still possible!
                chop 'grid nneededinnextblock 
                sub 'occurlist\0: nneededinnextblock 
                if? size (grid = 0) [ add 'totalsum + recursivecounter grid occurlist 0] ; end condition.
                else [
                        if (first grid = 2) [return 0] ; force a . after => else fail..
                        chop 'grid ; 0 or 1 => force it to be 0.
                        add 'totalsum   recursivecounter grid occurlist 0
                        ]
                ]
        else[ ; 1 or ?
                ; change it to 0, drop one point and continue!   
                add 'totalsum  + recursivecounter (drop grid) occurlist

                if (min first.n: nneededinnextblock grid 0) [return 0] ; a zero in the next seris.
                ;else: still possible!
                chop 'grid nneededinnextblock 
                sub 'occurlist\0: nneededinnextblock 
                if? size (grid = 0) [ add 'totalsum + recursivecounter grid occurlist 0] ; end condition.
                else [
                        if (first grid = 2) [return 0]
                        chop 'grid ; 0 or 1 => force it to be 0.
                        add 'totalsum   recursivecounter grid occurlist 0
                ]
        ]



    return totalsum
]



grid: [ 1 0 0 2 0]
occurlist: [1 3 ]
print ["totsum "recursivecounter grid occurlist]

solveB: $[inputstr expandntimes][

loop inputstr 'lines[

    replace 'lines "?" "1" ; unknown
    replace 'lines "." "0" ; Ground
    replace 'lines "#" "2" ; 

    both: split.by: " " lines  
    inspect both
    grid: to [:integer] split both\0

    occurlist: to [:integer] split.by: "," both\1
    print grid
    print occurlist
    totsum: 0
    recursivecounter grid occurlist totsum 

    ]
]
t1: benchmark.get  [ 
;    print [~"|year| |day| a: "  ( sum solveA inputstr 1)] 
]


t2:  benchmark.get  [ 
    print "Start B solve:"
    numinputstr: new inputstr
answB: solveB  numinputstr 1

    print [~"|year| |day| b: "  ] 
    ]


print(~"Time to parse: \n |year|\\|day|parse) |t0| \n  Time to solve: \n |year|\\|day|a) |t1| \n |year|\\|day|b) |t2|")



