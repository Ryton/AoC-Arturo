; ./bin/arturo
start: now
inputstr: read "input2019_3.txt"
;print inputstr
;print inputstr
arr: split.lines inputstr
w1: split.by: "," arr\0
w2: split.by: "," arr\1 
;print w1

;print  [first arr  last arr]

l: to :complex @[1 0]
r: to :complex @[neg 1 0]
u: to :complex @[0 1]
d: to :complex @[0 neg 1]

mapping:#
[ "U": u  "D": d  "L": l    "R": r ]


splitnode: $[step][ 
direction: step\0
temp: new step
qtt: to :integer drop temp 1
;print direction
return @[direction qtt];qtt: temp
]

getdir: $[step][ 
return step\0
]


getqty: $[step][ 
qtt: to :integer drop step 1
;print direction
return qtt;qtt: temp
]

;print [getdir "R20"]
;print  getqty "R20"

manh: $[x,y][abs x + abs y]

wire1path: new @[ to :complex [0 0] ]
loop.with: 'n w1 'nextnode [
    qtt: getqty nextnode
    direction: getdir nextnode
;print to :complex last wire1path
loop 1..qtt 'x
    [
        ;'route ++ @( add last route l)
 ;       'wire1path ++ @( (to :complex last wire1path)  + to :complex mapping\[direction] )
 'wire1path ++ (to :complex last wire1path)  + to :complex mapping\[direction]
]
]
;print size wire1path 

wire2path: new @[  to :complex [0 0] ]
loop.with: 'n w2 'nextnode [
    qtt: getqty nextnode
    direction: getdir nextnode
;print to :complex last wire1path
loop 1..qtt 'x
    [
        ;'route ++ @( add last route l)
 ;       'wire2path ++ @( (to :complex last wire2path)  + to :complex mapping\[direction] )
 'wire2path ++ (to :complex last wire2path)  + to :complex mapping\[direction]
]
]
;print size wire2path 
;inspect wire1path
;inspect wire2path

fulljointslist: benchmark [intersection wire1path wire2path]
joints: drop (fulljointslist)  1 ; drop 1 == the origin, which is in both lists.
print ["joints" joints] ; final list has 36 items.

joints_manual: "0.0+0.0i 678.0-183.0i 626.0-262.0i 1077.0-183.0i 626.0-456.0i 626.0-188.0i 1094.0-462.0i 1094.0-500.0i 1094.0-823.0i 1094.0-857.0i 1443.0-954.0i 1517.0-500.0i 1570.0-411.0i 1654.0-411.0i 2153.0-941.0i 2298.0-1219.0i 2298.0-948.0i 1443.0-948.0i 1351.0-857.0i 1351.0-823.0i 900.0-601.0i 682.0-601.0i 626.0-601.0i -675.0-1040.0i -723.0-842.0i -561.0+0.0i -227.0+0.0i -926.0-1467.0i -997.0-1007.0i -997.0-1227.0i -926.0-1434.0i -838.0-1612.0i -838.0-2262.0i -891.0-2455.0i "

Distances: new []
loop joints 'item 
[print [abs(item + conj item)/2. abs(item - conj item)/2.]
'Distances ++ ((abs(item + conj item) + abs(item - conj item))/2.) ]
print ["distances presort" Distances]
sort 'Distances
print ["distances postsort" Distances]
;mindistance:  227 ; manual lookup.
; 3b

;print size joints 
;print type joints\0

sumindex: new []
listindex1:  new []
listindex2:  new []
loop joints 'joint
[
    i1: index wire1path joint 
    i2: index wire2path joint 
    ;'listindex1 ++ i1
    ;'listindex2 ++ i2
    
'sumindex ++ i1+i2
] 
;print ["i1" listindex1]
;print ["i2" listindex2]
print ["unsorted sumindex "sumindex]
sort'sumindex
;print [addcomplex l d]
print ["sorted sumindex "sumindex]
print ["Jumbled wires:" ]
print ["day 2019- 3a: "  Distances\2 ] ; shortest manh distance. drop the first two as those include origin?
print ["day 2019- 3b: " sumindex\0] ; lowest sumindex
print ["dattime at start:             " start     ]
print ["dattime after (incl parsing): " now ]
