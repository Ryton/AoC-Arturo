#!/home/ryton/.arturo/bin/arturo -e


;expected output (first iteration): 
;one 3, two 1, two 3, two 2, two 1, one three;
; or [132123222113] .<

; AIM: find the LENGTH / number of digits 
; at iteration 4O and eventually 90, with above input.
i: [3 1 1 3 3 2 2 1 1 3 ]
; This problem scales up quickly:
; iteration 5: 38 digits
; iteration 10: 118 digits
; iteration 15: 428 digits
; iteration 20: 1622 digits
; ... iteration 40: 329356 digits.

;outstr: stringiteration j
;;inspect outstr
;print ["strit: " outstr]



; attempt one:
; naive approach
applyonce: $[i][
    ; function aim:
    ; https://adventofcode.com/2015/day/10
    ; example in [1 1 2 1 4 3 0] (assume no -999)
    ; naive approach fais after 17 iterations (out of 40).
    ; --> need to take a smarter approach, perhaps w string writes, and not loading the full vetor?
    
    'i ++ neg 999 ; append a value, last one ignored/skipped.
    
    output: new []
    n: 1 ; counter starts at 1
        fold.with:'it 0..dec dec size i [notused][
            ;print it
            it ; has to return something.
            v1: i\[it]
            v2: i\[it+1]
            if? (v1 = v2) [inc 'n]
            else [ 'output ++ n
                   'output ++ v1
                    n: 1
                ]
        ]
    ;print ["out: " output]
    return output
    ]



arr2str: $[x][
            to :string  join.by: "" x]
str2arr: $[x][temp: split.by: "" x to :integer]
;print i
j: arr2str i
;print ["inputstr :" j ]
;print [" squeezed" squeeze j]

stringiteration: $[x][
'x ++ "0" ; add zero at end
;print ["first step in strinter "x]
newstr: new ""
elements: squeeze x
;print elements
count: neg 1
loop elements 'val [
    ;print [~"x |x|"]
    nextval: first x
    ;print [~"nextval: |nextval|"]
    ;copyx: new x
    
    loop x 'el [
        inc 'count
        drop 'x 1 ; drop the first element of x.
        if (val <> el) [ ; then skip bottom block.
            ;print [~"count |count| , |val| written to newstr"]
            'newstr ++ (to :string count)
            'newstr ++ to :string val
            ;print newstr
            count: 0
            break
            ]   

        ;print [~"x |x|"]
        ;print [count val]
    ]

]
return newstr
]



pattern: {/(.)\1?/}

;based on i
currstr: to :string (join.by: "" i)

pprint: $[varname] [
    ; function for prettyprint. Requires string input!
    print [~"|varname| has values |var varname|"]
    ]

regexmethod: $[n][
    currstr: j
    ;print size currstr

; this runs to ieration 36 on online tool :-)
    loop 1..n 'iter [
    splitusingregex: match currstr pattern
    nextstr: ""
    loop splitusingregex 'val [
    'nextstr ++ to :string size val 
    'nextstr ++ val\[0]
    ]
    currstr: nextstr
    ;pprint "iter"
    ;print [~"iteration |iter|, length |size currstr|"]
    ]
]



;print splitkeys

print ["input" i]
j: new arr2str i

inspect j
;print j

; iteration 1 OK.
; inspect stringiteration arr2str i 


;i: istringiteration i
;j: i ; arr2str
;loop 1..90 [x][
;j: smartapproach j
    ;prints ["iteration =>" x ":" size j]
   ;'out: applyonce out
;]


lookAndSay: function [n][
    if n=0 -> return j
    previous: lookAndSay n-1

    result: ""
    currentCounter: 0
    currentCh: first previous
    loop previous 'ch [
        if? currentCh <> ch [
            if not? zero? currentCounter ->
                'result ++ (to :string currentCounter) ++ currentCh
            currentCounter: 1
            currentCh: ch
        ]
        else ->
            currentCounter: currentCounter + 1
    ]
    'result ++ (to :string currentCounter) ++ currentCh
    return result
]


;loop 0..90 'n [


smartapproach: $[initial][flatten map chunk initial => [&] 'x -> @[size x, first x]]


latestandgreatest: $[][
loop 1..30 [x][
        chunk 'j => [&]
        map 'j 'z -> @[size z, z\0]
        flatten 'j
        prints ["iteration =>" x ":" size j]
]
]

; w/o printing, for benchmark, up to interval 30
print ["My first naive method"]
benchmark [
loop 1..30 [x][
;print x
j: stringiteration j
;prints ["iteration =>" x ":" size j]
]
; 
]

print ["My method (regex)"]
j: new arr2str i
benchmark [size regexmethod 30]

print ["Rosetta stone:"]
j: new arr2str i
benchmark [size lookAndSay 30]

print ["Latest (piping)"]
j: new i
benchmark [ latestandgreatest
        ]




;    print [n "->" size j]

;]