#!/home/ryton/.arturo/bin/arturo -e
; problem: https://adventofcode.com/2015/day/17

; Toy example
;input: new [20, 15, 10, 5,5]
;targetval: 25
;answer A: 4


;; actual example
input: [ 43 3 4 10 21 44 4 6 47 41 34 17 17 44 36 31 46 9 27 38 ]
targetval: 150
;answer (a): 1638

countSums: $[list] [enumerate @list [el] [ (el=targetval)]]

naiveway: $[input, targetval ][
        ; most naive approach: just list and sum them all => slow for large qts ofc!
        combinelist:[]
        loop 1..(size input) 'n [    ;print n
                                    list: new []
                                    newlist: (combine.by: n input)
                                    (loop newlist 'item ->  'list  ++ fold item [x,y]-> x + y)
                                    'combinelist ++ list
                                    ;print ["sumlist:" sumlist]
                                ]
        ;print combinelist
        return combinelist
]

mappedway: $[input, targetval ][
        ; most naive approach: just list and sum them all => slow for large qts ofc!
;
combinelist:      map size input 'n -> map combine.by:n input 'item -> 
        fold item [x,y]-> x + y
                                    ;print ["sumlist:" sumlist]
                            
        ;print combinelist
        return combinelist
]

;combinelist: naiveway input targetval
;print ["n elements to test: "size combinelist]
;print ["answer a: " enumerate combinelist [el] [ (el=targetval) ]]

; Piped approach
; (work in progress)

;combinelist: 

; fold item [x,y]-> x + y
; would become: 
;     item | fold [x,y]-> x + y
; or (even shorter):
;     item | fold => [& + &]


print "Piped approach:" 
print "answer A: " 
countSums: $[list] [enumerate @list [el] [ (el=targetval)]]
input       | size
            | map 'n ->
            (input | combine.by: n
                   | map 'item -> 
             (item | fold => [& + &]))
            |flatten 
           ; | array
            | enumerate 'el -> el=targetval ;            
            ;| countSums
            |print

;input   
        ;| naiveway targetval
        
;        | mappedway targetval

;        |  print


;print enumerate naiveway input targetval combinelist [el] [ (el=targetval) ]

; part2: $[input, targetval, ncontainers][
;         ; most naive approach: just list and sum them all => slow for large qts ofc!
;         combinelist:[]
;         totalsum: 0
;         n: ncontainers
;             print n
;                                     list: new []
;                                     newlist: (combine.by: n input)
;                                     (loop newlist 'item ->  'list  ++ fold item [x,y]-> x + y)
;                                     'combinelist ++ list
;                                     ;print ["sumlist:" sumlist]
        
;         counttrue: 0
;         print ["n elements to test: "size combinelist]
;         ;print combinelist
;         ;(loop combinelist 'el  [ if? (equal? el  targetval) -> inc 'counttrue  ])
;         return combinelist
; ]


; ncontainers: 4
; combinelist2: part2 input targetval ncontainers


; print ["answer b: " enumerate combinelist2 [el] [ (el=targetval) ]]




;print truelist
;  combinelist 
; | fold [x y] [x+y] 
; | map
; | print


; loop combinelist 'items [
;  'totalsum ++ countTrues (checkone (items))
; ]

; print map fold totalsum [x y] -> x+y
;     [
;     if? (checkone comb) ->  inc 'totcounter 
;     ]


;print ["2015 16 b: Aunt " answB] 

; w calories: Total:  181064739375000 , contribs:  95 3 1 1 , effects:  95 1235 570 570 4750 
;w/o calories: 38118892500


;2540 is too high??

;inspect.muted listofpacinglists
;print size listofpacinglists
    ;distance2503 << distance\[2503]



pprint: $[varname] [
    ; function for prettyprint. Requires string input!
    print [~"|varname| has value(s): |var varname|"]
    ]



